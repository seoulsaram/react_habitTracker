{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","handleReset","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.536fbd8a.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  componentDidMount() {\n    console.log(`habit:${this.props.habit.name} mounted`);\n  }\n\n  componentWillUnmount() {\n    //컴포넌트가 지우기 직전에 호출됨.\n    console.log(`habit:${this.props.habit.name} Will unmount`);\n  }\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n\n    //habit 오브젝트에 들어있는 속성의 이름을 정확하게 변수이름으로 사용해주면\n    //알아서 그 속성이 그 변수로 들어간다. 심지어 위와 같이 여러개의 변수명을 사용해도..짱!\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { memo } from \"react\";\n\nconst HabitAddForm = memo((props) => {\n  //함수 안에서는 this없이도 접근할 수 있음\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n\n  //오브젝트타입.\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const name = inputRef.current.value;\n    //form태그를 사용해서 서밋을 하면 브라우저가 새로고침되는데, 이걸 방지하는 코드.\n    name && props.onAdd(name);\n    //이름이 있다면~ onAdd에 이름을 보내줄거야\n\n    //this.inputRef.current.value= '';\n    formRef.current.reset();\n    //해빗을 추가한 뒤 인풋창을 리셋시켜줌.\n  };\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Habit\"\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = (habit) => {\n    this.props.onDelete(habit);\n  };\n\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n\n  handleReset = () => {};\n\n  render() {\n    return (\n      <div>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          ))}\n          {/* habit이라는 prop이름에 각각의 habit을 전달해줄거야. */}\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n//이걸 컴포넌트로 바꿔서 화면 완성해보기\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n        //habit이라는 오브젝트의 키와 밸류를 똑같이 복사한다음에, count의 값만 새로운걸로 덮어쓸거야\n      }\n      return item;\n    });\n    //...는 위에 스테이트의 habits배열을 새로운 배열로 복사해오는 것임\n\n    this.setState({ habits: habits });\n    //새로운 오브젝트를 만들어서 key를 habits로 주고 value는 위에서 const = habits해준 habits를 넣었다.\n    //이렇게 key:val 이름이 같을 때는 {habits} 하나만 써줘도 됨.\n  };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    //전체 배열을 복사해서 새로운 변수에 넣고\n    //const index = habits.indexOf(habit);\n    //받아온 인덱스번호를 해빗츠 인덱스번호로 넣은뒤\n\n    //<내코드>\n    // if (habits[index].count <= 0) {\n    //   return;\n    // } else {\n    //   habits[index].count--;\n    // }\n\n    //<엘리쌤코드>\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    // this.setState({ habits: habits });\n    //변경한 count값을 가진 habits배열을 state에 set해주는데\n    //이때의 배열 이름은 원본과 동일하게 해준다.\n    this.setState({ habits: habits });\n  };\n\n  handleDelete = (habit) => {\n    //<내코드>\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits.splice(index, 1);\n\n    //<샘코드>\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    //id가 같지 않은것만 필터로 보여주기\n    this.setState({ habits: habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n      //habit을 빙글빙글 돌면서 count를 0으로 만들고 새로운 배열로 뱉어냄\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app.jsx\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  //root라는 아이디를 가진 요소에 제일 상위에 있는 App이라는 컴포넌트를 연결할거다.\n  document.getElementById(\"root\")\n  //index.html에 id=rood인 div를 찾아서 이 요소에 rootcomponent를 연결시켜준다.\n);\n"],"sourceRoot":""}